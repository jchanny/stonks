'''
Jeremy Chan 2020
Analysis tool for reading pkl of earnings data generated by scraper.py

--------------------------
REVISION HISTORY
10/20 - Created
--------------------------
'''
import sys
sys.path.insert(1,'web_scraper/')
import pickle
import csv
from datetime import datetime, timedelta
import decimal

def getShortTermOutlook(tickerData):
    try:
        return tickerData['outlook']['direction']
    except KeyError:
        return ""

#returns difference between preMarket price & previous close
#will return 0.0 if no premarket data was found
def priceChange(tickerData):
    #compare previous close to open, THIS MUST BE RUN BEFORE MARKET OPEN OF CURRENT DAY!!
    try:
        prevClose = float(tickerData['fundamentalsSummary']['price']['regularMarketPreviousClose']['fmt'].replace(',',''))
        preMarket = float(tickerData['fundamentalsSummary']['price']['preMarketPrice']['fmt'].replace(',',''))
        return round((preMarket - prevClose) / prevClose, 3)
    except KeyError:
        return ""

def getTrend(tickerData):
    #higher score is stronger signal
    try:
        direction = tickerData['technicals']['outlook']['direction']
        score =  tickerData['technicals']['outlook']['score']
        if direction == "Bearish":
            score *= -1
        return score
    except KeyError:
        return ""

def getChartPattern(tickerData):
    try:
        return tickerData['technicals']['technicalTrend'][0]['eventType']
    except KeyError:
        return ""

def getSupportDistance(tickerData):
    try:
        key = tickerData['technicals']['technicals']        
        prevClose = float(tickerData['fundamentalsSummary']['price']['regularMarketPreviousClose']['fmt'].replace(',',''))
        return (prevClose - key['support']) / key['support']
    except KeyError:
        return ""

def getResistanceDistance(tickerData):
    try:
        key = tickerData['technicals']['technicals']        
        prevClose = float(tickerData['fundamentalsSummary']['price']['regularMarketPreviousClose']['fmt'].replace(',',''))
        return (prevClose - key['resistance']) / key['resistance']
    except KeyError:
        return ""

def getStopLossDistance(tickerData):
    try:
        key = tickerData['technicals']['technicals']        
        prevClose = float(tickerData['fundamentalsSummary']['price']['regularMarketPreviousClose']['fmt'].replace(',',''))
        return (prevClose - key['stopLoss']) / key['stopLoss']
    except KeyError:
        return ""
    
#returns the trading discount this stock is trading at (-10% means 10% overvalued)
def getDiscount(tickerData):
    try:
        return tickerData['technicals']['valuation']['discount']
    except KeyError:
        return ""

def getShortRatio(tickerData):
    try:
        return float(tickerData['fundamentalsSummary']['fundamentals']['shortRatio']['raw'])
    except KeyError:
        return ""

#-------------------------------------------------------------
#              fundamentals data
#-------------------------------------------------------------

def getPercentHeldInstitutions(tickerData):
    try:
        return float(tickerData['fundamentalsSummary']['fundamentals']['heldPercentInstitutions']['raw'])
    except KeyError:
        return ""

def getDistanceToTargetMedianPrice(tickerData):
    try:
        targetMedian = float(tickerData['fundamentalsSummary']['fundamentals']['targetMedianPrice']['fmt'].replace(',',''))
        prevClose = float(tickerData['fundamentalsSummary']['price']['regularMarketPreviousClose']['fmt'].replace(',',''))
        return (prevClose - targetMedian) / targetMedian
    except Exception:
        return ""

def getAnalystRatingRatio(tickerData):
    try:
        currentTrend = tickerData['fundamentalsSummary']['analystTrend']['trend'][0]
        strongBuy = currentTrend['strongBuy']
        buy = currentTrend['buy']
        sell = currentTrend['sell']
        strongSell = currentTrend['strongSell']
        total = strongBuy + buy + sell + strongSell
        return (((strongBuy * 1.5) + buy) - (sell + (strongSell * 1.5))) / total
    except Exception:
        return ""

#-------------------------------------------------------------
def readPickleIntoDict(date):
    try:
        f = open("./web_scraper/" + date + "_earnings.pkl", "rb")
        data = pickle.load(f)
        return data; #yes loading into memory, i know i know but its fairly small
    except Exception:
        return ""


#converts pickels to csv of earnings data from dateFrom to dateTo, inclusive
def pklToCsv(dateFrom,dateTo):
    #today = date.today().strftime("%m_%d_%Y")
    start = datetime.strptime(dateFrom, "%m_%d_%Y")
    end = datetime.strptime(dateTo, "%m_%d_%Y")
    delta = timedelta(days = 1)

    #write to csv
    outputFile = dateFrom + "__" + dateTo + "_earnings.csv"
    with open(outputFile, "w") as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['ticker','date','priceChange','trend','chartPattern','supportDist','resistanceDist','stopLossDist','discount','shortRatio','institutionHeld','targetPriceDist','analystScore'])
        #loop over each date's earnings
        while start <= end:
            date = start.strftime("%m_%d_%Y")
            data = readPickleIntoDict(date)
            #only extract certain data from the pickle
            for ticker in data:
                #ASSUMPTION: returns 0.0 if preMarket data couldn't be found, likely that means ER wasn't on this date
                if priceChange(data[ticker]) == 0.0:
                    continue

                writer.writerow([ticker,
                                 date,
                                 priceChange(data[ticker]),
                                 getTrend(data[ticker]),
                                 getChartPattern(data[ticker]),
                                 getSupportDistance(data[ticker]),
                                 getResistanceDistance(data[ticker]),
                                 getStopLossDistance(data[ticker]),
                                 getDiscount(data[ticker]),
                                 getShortRatio(data[ticker]),
                                 getPercentHeldInstitutions(data[ticker]),
                                 getDistanceToTargetMedianPrice(data[ticker]),
                                 getAnalystRatingRatio(data[ticker])
                                 ])                
            start += delta
        
def main():
    startDate = input("Enter start of time period to examine as m_d_YYYY: ")
    endDate = input("Enter end of time period to examine as m_d_YYYY: ")
    pklToCsv(startDate,endDate)

if __name__ == '__main__':
    main()
