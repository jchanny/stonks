'''
Jeremy Chan 2020
Analysis tool for reading pkl of earnings data generated by scraper.py

--------------------------
REVISION HISTORY
10/20 - Created
--------------------------
'''
import sys
sys.path.insert(1,'web_scraper/')
import pandas as pd
import pickle
import csv
import matplotlib as mp
from datetime import datetime, timedelta
import decimal

def getShortTermOutlook(tickerData):
    try:
        return tickerData['outlook']['direction']
    except KeyError:
        return ""

#returns difference between preMarket price & previous close
def priceChange(tickerData):
    #compare previous close to open, THIS MUST BE RUN BEFORE MARKET OPEN OF CURRENT DAY!!
    try:
        prevClose = float(tickerData['fundamentalsSummary']['price']['regularMarketPrice']['fmt'].replace(',',''))
        preMarket = float(tickerData['fundamentalsSummary']['price']['preMarketPrice']['fmt'].replace(',',''))
        return round((preMarket - prevClose) / prevClose, 3)
    except KeyError:
        return 0.0

def getTrend(tickerData):
    #higher score is stronger signal
    try:
        direction = tickerData['technicals']['outlook']['direction']
        score =  tickerData['technicals']['outlook']['score']
        if direction == "Bearish":
            score *= -1
        return score
    except KeyError:
        return 0

def getChartPattern(tickerData):
    try:
        return tickerData['technicals']['technicalTrend'][0]['eventType']
    except KeyError:
        return ""

#returns an array in the following format: [support,resistance,stopLoss]
def getTechnicalLevels(tickerData):
    data = []
    try:
        key = tickerData['technicals']['technicals']
        data.append(key['support'])
        data.append(key['resistance'])
        data.append(key['stopLoss'])
        return data
    except KeyError:
        return ""


#returns the trading discount this stock is trading at (-10% means 10% overvalued)
def getDiscount(tickerData):
    try:
        return tickerData['technicals']['valuation']['discount']
    except KeyError:
        return ""
    
def readPickleIntoDict(date):
    try:
        f = open("./web_scraper/" + date + "_earnings.pkl", "rb")
        data = pickle.load(f)
        return data; #yes loading into memory, i know i know but its fairly small
    except Exception:
        return ""


#converts pickels to csv of earnings data from dateFrom to dateTo, inclusive
def pklToCsv(dateFrom,dateTo):
    #today = date.today().strftime("%m_%d_%Y")
    start = datetime.strptime(dateFrom, "%m_%d_%Y")
    end = datetime.strptime(dateTo, "%m_%d_%Y")
    delta = timedelta(days = 1)

    #write to csv
    outputFile = dateFrom + "_" + dateTo + "_earnings.csv"
    with open(outputFile, "w") as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['ticker','date','priceChange','trend','chartPattern','technicalLevels','discount'])
        #loop over each date's earnings
        while start <= end:
            date = start.strftime("%m_%d_%Y")
            data = readPickleIntoDict(date)
            #only extract certain data from the pickle
            for ticker in data:
                writer.writerow([ticker,
                                 date,
                                 priceChange(data[ticker]),
                                 getTrend(data[ticker]),
                                 getChartPattern(data[ticker]),
                                 getTechnicalLevels(data[ticker]),
                                 getDiscount(data[ticker])
                                 ])                
            start += delta
        
pklToCsv("10_25_2020","11_11_2020")
